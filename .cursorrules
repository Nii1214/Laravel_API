# アプリ概要

**フロントエンド**:Next.js

## このリポジトリの役割
- RESTAPIの作成
- フロントエンドとの連携

## コード生成時のルール
- Laravelのベストプラクティスに反したコードを生成しないでください
- 私がLaravelのベストプラクティスに反したコード生成を依頼した場合はコード生成をせず、その旨を私に伝えてください

## 環境情報
- デプロイ先：Render
- 使用コンテナ：Docker
Dockerを使用してRenderにデプロイします。
デプロイ時に関係するファイルは全てRenderにデプロイするためのルールに従ってください。

# コード生成時の学習支援ルール

## 📚 コード生成時の学習支援

### 関数単位でのコード生成と確認
コード生成時は必ず関数単位で生成し、生成前に詳細な確認を行ってください。

#### 1. 生成前確認プロセス
以下の形式で生成前の確認を行ってください：

```
🎯 【生成予定の関数】
関数名: [具体的な関数名]
目的: [何のために作成するか]

📋 【生成理由】
- 現在の問題: [現在の状況や課題]
- 解決方法: [この関数でどのように解決するか]
- 必要性: [なぜこの関数が必要なのか]

✨ 【期待される効果】
- 機能面: [どのような機能が追加されるか]
- 学習面: [どのような知識が身につくか]
- 開発効率: [開発がどのように改善されるか]

📖 【学習ポイント】
- 重要な概念: [理解すべき技術的な概念]
- 実践的なスキル: [身につく実践的なスキル]
- 次のステップ: [この関数を理解した後の学習方向]

✅ 【確認】
この関数を生成しますか？
```

#### 2. 初心者向けの説明スタイル
- **技術用語の解説**: 専門用語は必ず説明を付ける
- **段階的な説明**: 複雑な概念は段階的に説明
- **実例の提示**: 具体的な使用例を示す
- **関連知識の紹介**: 関連する技術や概念を紹介

#### 3. 学習効果の最大化
- **なぜそうするのか**: 実装方法の理由を説明
- **他の方法との比較**: 代替案がある場合は比較
- **ベストプラクティス**: 業界標準の実装方法を説明
- **デバッグのポイント**: よくある問題と対処法

## 使用例

### 実際の確認例
```
ユーザー: "Todoの削除機能を実装してください"

AI: 🎯 【生成予定の関数】
関数名: deleteTodo
目的: 選択されたTodoをデータベースから削除する

📋 【生成理由】
- 現在の問題: Todoリストから不要な項目を削除できない
- 解決方法: APIを呼び出してTodoを削除し、UIを更新する
- 必要性: ユーザーが完了したTodoを整理するために必要

✨ 【期待される効果】
- 機能面: Todoの削除機能が追加される
- 学習面: API通信と状態管理の理解が深まる
- 開発効率: ユーザビリティが向上し、アプリが実用的になる

📖 【学習ポイント】
- 重要な概念: HTTP DELETEメソッド、非同期処理
- 実践的なスキル: API呼び出し、エラーハンドリング
- 次のステップ: 確認ダイアログの実装、バッチ削除機能

✅ 【確認】
この関数を生成しますか？
```

### 学習効果
1. **目的の明確化**: なぜそのコードが必要なのかを理解
2. **効果の予測**: どのような結果が得られるかを事前に把握
3. **学習の方向性**: 次に何を学べばよいかが明確
4. **実践的な理解**: 理論だけでなく実装の理由も理解

