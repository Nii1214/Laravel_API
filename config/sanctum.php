<?php

use Laravel\Sanctum\Sanctum;

return [

    /*
    |--------------------------------------------------------------------------
    | ステートフルドメイン
    |--------------------------------------------------------------------------
    |
    | 以下のドメイン/ホストからのリクエストは、ステートフルAPI認証クッキーを
    | 受け取ります。通常、これらにはフロントエンドSPAからAPIにアクセスする
    | ローカル環境と本番環境のドメインが含まれるべきです。
    |
    | 例: localhost, example.com, api.example.com
    |
    */

    'stateful' => explode(',', env('SANCTUM_STATEFUL_DOMAINS', sprintf(
        '%s%s',
        'localhost,localhost:3000,127.0.0.1,127.0.0.1:8000,::1',
        Sanctum::currentApplicationUrlWithPort(),
        // Sanctum::currentRequestHost(),
    ))),

    /*
    |--------------------------------------------------------------------------
    | Sanctumガード
    |--------------------------------------------------------------------------
    |
    | この配列には、Sanctumがリクエストの認証を試行する際にチェックされる
    | 認証ガードが含まれています。これらのガードのいずれもリクエストを
    | 認証できない場合、Sanctumは受信リクエストに存在するBearerトークンを
    | 認証に使用します。
    |
    | 通常は'web'ガードを使用します。
    |
    */

    'guard' => ['web'],

    /*
    |--------------------------------------------------------------------------
    | 有効期限（分）
    |--------------------------------------------------------------------------
    |
    | この値は、発行されたトークンが期限切れとみなされるまでの分数を制御します。
    | これは、トークンの"expires_at"属性に設定された値を上書きしますが、
    | ファーストパーティセッションには影響しません。
    |
    | nullに設定すると、トークンは無期限になります。
    | 例: 60（1時間）、1440（24時間）、10080（1週間）
    |
    */

    'expiration' => null,

    /*
    |--------------------------------------------------------------------------
    | トークンプレフィックス
    |--------------------------------------------------------------------------
    |
    | Sanctumは、オープンソースプラットフォームが維持する多数のセキュリティ
    | スキャンイニシアチブを活用するために、新しいトークンにプレフィックスを
    | 付けることができます。これにより、開発者がリポジトリにトークンを
    | コミットした場合に通知されます。
    |
    | 参考: https://docs.github.com/en/code-security/secret-scanning/about-secret-scanning
    |
    | 例: 'sk_'、'pk_'、'live_'、'test_'
    |
    */

    'token_prefix' => env('SANCTUM_TOKEN_PREFIX', ''),

    /*
    |--------------------------------------------------------------------------
    | Sanctumミドルウェア
    |--------------------------------------------------------------------------
    |
    | SanctumでファーストパーティSPAを認証する際、リクエスト処理中にSanctumが
    | 使用するミドルウェアの一部をカスタマイズする必要がある場合があります。
    | 必要に応じて、以下のミドルウェアを変更できます。
    |
    | 各ミドルウェアの役割:
    | - authenticate_session: セッション認証
    | - encrypt_cookies: クッキーの暗号化
    | - validate_csrf_token: CSRFトークンの検証
    |
    */

    'middleware' => [
        'authenticate_session' => Laravel\Sanctum\Http\Middleware\AuthenticateSession::class,
        'encrypt_cookies' => Illuminate\Cookie\Middleware\EncryptCookies::class,
        'validate_csrf_token' => Illuminate\Foundation\Http\Middleware\ValidateCsrfToken::class,
    ],

];
